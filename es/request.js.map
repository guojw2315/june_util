{"version":3,"sources":["../src/request.js"],"names":["axios","getToken","setToken","getRefreshToken","getTokenState","setTokenState","getPosId","setRefreshToken","refreshToken","instance","path","baseURL","post","setHeaderToken","isNeedToken","options","accessToken","tokenLose","console","log","onTokenLose","defaults","headers","common","Authorization","setHeaders","setPosHeaders","key","create","config","timeout","isRefreshing","requests","interceptors","response","use","onResponse","error","Promise","reject","test","status","url","includes","refreshTokenPath","refreshURL","then","res","access_token","data","tokenKey","refresh_token","refreshTokenKey","forEach","cb","err","resolve","push","token","onError","get","params","method","put","deleteReq"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { getToken, setToken, getRefreshToken, getTokenState, setTokenState, getPosId, setRefreshToken } from './auth'\n\n// 刷新 access_token 的接口\nconst refreshToken = (instance, path = '/refresh/token', baseURL) => {\n    return instance.post(path + `?refreshToken=${getRefreshToken()}`, { refreshToken: getRefreshToken() }, { baseURL })\n    // return instance.request({\n    //     baseURL,\n    //     url: path + `?refreshToken=${getRefreshToken()}`,\n    //     method: 'post',\n    //     data: { refreshToken: getRefreshToken() }\n    // })\n}\n\n// 给请求头添加 access_token\nconst setHeaderToken = (instance, isNeedToken, options = {}) => {\n    const refreshToken = isNeedToken ? getRefreshToken() : null\n    const accessToken = isNeedToken ? getToken() : null\n\n    if (isNeedToken) { // api 请求需要携带 access_token\n        let tokenLose = getTokenState()\n        if (!refreshToken && !tokenLose) {\n            console.log('不存在 access_token 则跳转回登录页')\n            setTokenState(true)\n            options.onTokenLose && options.onTokenLose()\n        }\n        instance.defaults.headers.common.Authorization = `Bearer ${accessToken}`\n        options.setHeaders && options.setHeaders(instance)\n    }\n}\n\nexport const setPosHeaders = (instance, key = 'x-shj-request-dept-pos-id') => {\n    instance.defaults.headers.common[key] = getPosId()\n}\n\nexport default function create(config = {}, options = {}) {\n    // 创建 axios 实例\n    const instance = axios.create({\n        // baseURL: process.env.GATSBY_API_URL,\n        // baseURL: '/api',\n        timeout: 30000,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        ...config\n    })\n\n    let isRefreshing = false // 标记是否正在刷新 token\n    let requests = [] // 存储待重发请求的数组\n\n    instance.interceptors.response.use(response => {\n        return typeof options.onResponse === 'function' ? options.onResponse(response) : response\n    }, error => {\n        if (!error.response) {\n            return Promise.reject(error)\n        }\n        if (/^417$|^401$/g.test(error.response.status) && !error.config.url.includes('/auth/refresh')) {\n            const { config } = error\n            if (!isRefreshing) {\n                isRefreshing = true\n                return refreshToken(instance, options.refreshTokenPath, options.refreshURL || config.baseURL)\n                    .then(res => {\n                        const access_token = res.data[options.tokenKey || 'data']\n                        const refresh_token = res.headers[options.refreshTokenKey || 'refresh_token']\n                        setToken(access_token)\n                        setRefreshToken(refresh_token)\n                        config.headers.Authorization = `Bearer ${access_token}`\n                        // token 刷新后将数组的方法重新执行\n                        requests.forEach((cb) => cb(access_token))\n                        requests = [] // 重新请求完清空\n                        return instance(config)\n                    }).catch(err => {\n                        console.log('抱歉，您的登录状态已失效，请重新登录！')\n                        options.onTokenLose && options.onTokenLose()\n                        return Promise.reject(err)\n                    }).finally(() => {\n                        isRefreshing = false\n                    })\n            } else {\n                // 返回未执行 resolve 的 Promise\n                return new Promise(resolve => {\n                    // 用函数形式将 resolve 存入，等待刷新后再执行\n                    requests.push(token => {\n                        config.headers.Authorization = `Bearer ${token}`\n                        resolve(instance(config))\n                    })\n                })\n            }\n        } else {\n            options.onError && options.onError(error.response)\n        }\n\n        return Promise.reject(error)\n    })\n\n\n    // 有些 api 并不需要用户授权使用，则无需携带 access_token；默认不携带，需要传则设置第三个参数为 true\n    const get = (url, params = {}, isNeedToken = false, headers = {}) => {\n        setHeaderToken(instance, isNeedToken, options)\n        return instance({\n            method: 'get',\n            url,\n            params,\n            headers: { ...instance.defaults.headers, ...headers },\n        })\n    }\n\n    const post = (url, {\n        data = {},\n        params = {},\n        headers = {},\n    }, isNeedToken = false) => {\n        setHeaderToken(instance, isNeedToken, options)\n        return instance({\n            method: 'post',\n            url,\n            params: params,\n            data: data,\n            headers: { ...instance.defaults.headers, ...headers },\n        })\n    }\n\n    const put = (url, {\n        data = {},\n        params = {},\n        headers = {},\n    }, isNeedToken = false) => {\n        setHeaderToken(instance, isNeedToken, options)\n        return instance({\n            method: 'put',\n            url,\n            params: params,\n            data: data,\n            headers: { ...instance.defaults.headers, ...headers },\n        })\n    }\n\n    const deleteReq = (url, {\n        data = {},\n        params = {},\n        headers = {},\n    }, isNeedToken = false) => {\n        setHeaderToken(instance, isNeedToken, options)\n        return instance({\n            method: 'delete',\n            url,\n            params: params,\n            data: data,\n            headers: { ...instance.defaults.headers, ...headers },\n        })\n    }\n\n    return {\n        instance,\n        get,\n        post,\n        put,\n        deleteReq,\n        setHeaderToken: () => setHeaderToken(instance, true, options),\n        refreshToken: (path) => refreshToken(instance, path || options.refreshTokenPath, options.refreshURL || config.baseURL),\n    }\n}\n\n\n"],"file":"request.js"}