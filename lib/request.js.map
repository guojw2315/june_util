{"version":3,"sources":["../src/request.js"],"names":["refreshToken","instance","path","baseURL","post","setHeaderToken","isNeedToken","options","accessToken","tokenLose","console","log","onTokenLose","defaults","headers","common","Authorization","setHeaders","setPosHeaders","key","create","config","axios","timeout","isRefreshing","requests","interceptors","response","use","error","Promise","reject","test","status","url","includes","refreshTokenPath","refreshURL","then","res","access_token","data","tokenKey","refresh_token","refreshTokenKey","forEach","cb","err","resolve","push","token","onError","get","params","method","put","deleteReq"],"mappings":";;;;;;AAAA;;AACA;;;;;;;;;;AAEA;AACA,IAAMA,aAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,IAAX,EAAoCC,OAApC,EAAgD;AAAA,MAArCD,IAAqC;AAArCA,IAAAA,IAAqC,GAA9B,gBAA8B;AAAA;;AACjE,SAAOD,QAAQ,CAACG,IAAT,CAAcF,IAAI,uBAAoB,4BAApB,CAAlB,EAA2D;AAAEF,IAAAA,YAAY,EAAE;AAAhB,GAA3D,EAAgG;AAAEG,IAAAA,OAAO,EAAPA;AAAF,GAAhG,CAAP,CADiE,CAEjE;AACA;AACA;AACA;AACA;AACA;AACH,CARD,C,CAUA;;;AACA,IAAME,eAAc,GAAG,SAAjBA,cAAiB,CAACJ,QAAD,EAAWK,WAAX,EAAwBC,OAAxB,EAAyC;AAAA,MAAjBA,OAAiB;AAAjBA,IAAAA,OAAiB,GAAP,EAAO;AAAA;;AAC5D,MAAMP,YAAY,GAAGM,WAAW,GAAG,4BAAH,GAAuB,IAAvD;AACA,MAAME,WAAW,GAAGF,WAAW,GAAG,qBAAH,GAAgB,IAA/C;;AAEA,MAAIA,WAAJ,EAAiB;AAAE;AACf,QAAIG,SAAS,GAAG,0BAAhB;;AACA,QAAI,CAACT,YAAD,IAAiB,CAACS,SAAtB,EAAiC;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,+BAAc,IAAd;AACAJ,MAAAA,OAAO,CAACK,WAAR,IAAuBL,OAAO,CAACK,WAAR,EAAvB;AACH;;AACDX,IAAAA,QAAQ,CAACY,QAAT,CAAkBC,OAAlB,CAA0BC,MAA1B,CAAiCC,aAAjC,eAA2DR,WAA3D;AACAD,IAAAA,OAAO,CAACU,UAAR,IAAsBV,OAAO,CAACU,UAAR,CAAmBhB,QAAnB,CAAtB;AACH;AACJ,CAdD;;AAgBO,IAAMiB,aAAa,GAAG,SAAhBA,aAAgB,CAACjB,QAAD,EAAWkB,GAAX,EAAiD;AAAA,MAAtCA,GAAsC;AAAtCA,IAAAA,GAAsC,GAAhC,2BAAgC;AAAA;;AAC1ElB,EAAAA,QAAQ,CAACY,QAAT,CAAkBC,OAAlB,CAA0BC,MAA1B,CAAiCI,GAAjC,IAAwC,qBAAxC;AACH,CAFM;;;;AAIQ,SAASC,MAAT,CAAgBC,MAAhB,EAA6Bd,OAA7B,EAA2C;AAAA,MAA3Bc,MAA2B;AAA3BA,IAAAA,MAA2B,GAAlB,EAAkB;AAAA;;AAAA,MAAdd,OAAc;AAAdA,IAAAA,OAAc,GAAJ,EAAI;AAAA;;AACtD;AACA,MAAMN,QAAQ,GAAGqB,kBAAMF,MAAN;AACb;AACA;AACAG,IAAAA,OAAO,EAAE,KAHI;AAIbT,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAJI,KAOVO,MAPU,EAAjB;;AAUA,MAAIG,YAAY,GAAG,KAAnB,CAZsD,CAY7B;;AACzB,MAAIC,QAAQ,GAAG,EAAf,CAbsD,CAapC;;AAElBxB,EAAAA,QAAQ,CAACyB,YAAT,CAAsBC,QAAtB,CAA+BC,GAA/B,CAAmC,UAAAD,QAAQ,EAAI;AAC3C,WAAOA,QAAP;AACH,GAFD,EAEG,UAAAE,KAAK,EAAI;AACR,QAAI,CAACA,KAAK,CAACF,QAAX,EAAqB;AACjB,aAAOG,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH;;AACD,QAAI,eAAeG,IAAf,CAAoBH,KAAK,CAACF,QAAN,CAAeM,MAAnC,KAA8C,CAACJ,KAAK,CAACR,MAAN,CAAaa,GAAb,CAAiBC,QAAjB,CAA0B,eAA1B,CAAnD,EAA+F;AAAA,UACnFd,OADmF,GACxEQ,KADwE,CACnFR,MADmF;;AAE3F,UAAI,CAACG,YAAL,EAAmB;AACfA,QAAAA,YAAY,GAAG,IAAf;AACA,eAAOxB,aAAY,CAACC,QAAD,EAAWM,OAAO,CAAC6B,gBAAnB,EAAqC7B,OAAO,CAAC8B,UAAR,IAAsBhB,OAAM,CAAClB,OAAlE,CAAZ,CACFmC,IADE,CACG,UAAAC,GAAG,EAAI;AACT,cAAMC,YAAY,GAAGD,GAAG,CAACE,IAAJ,CAASlC,OAAO,CAACmC,QAAR,IAAoB,MAA7B,CAArB;AACA,cAAMC,aAAa,GAAGJ,GAAG,CAACzB,OAAJ,CAAYP,OAAO,CAACqC,eAAR,IAA2B,eAAvC,CAAtB;AACA,8BAASJ,YAAT;AACA,qCAAgBG,aAAhB;AACAtB,UAAAA,OAAM,CAACP,OAAP,CAAeE,aAAf,eAAyCwB,YAAzC,CALS,CAMT;;AACAf,UAAAA,QAAQ,CAACoB,OAAT,CAAiB,UAACC,EAAD;AAAA,mBAAQA,EAAE,CAACN,YAAD,CAAV;AAAA,WAAjB;AACAf,UAAAA,QAAQ,GAAG,EAAX,CARS,CAQK;;AACd,iBAAOxB,QAAQ,CAACoB,OAAD,CAAf;AACH,SAXE,WAWM,UAAA0B,GAAG,EAAI;AACZrC,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAJ,UAAAA,OAAO,CAACK,WAAR,IAAuBL,OAAO,CAACK,WAAR,EAAvB;AACA,iBAAOkB,OAAO,CAACC,MAAR,CAAegB,GAAf,CAAP;AACH,SAfE,aAeQ,YAAM;AACbvB,UAAAA,YAAY,GAAG,KAAf;AACH,SAjBE,CAAP;AAkBH,OApBD,MAoBO;AACH;AACA,eAAO,IAAIM,OAAJ,CAAY,UAAAkB,OAAO,EAAI;AAC1B;AACAvB,UAAAA,QAAQ,CAACwB,IAAT,CAAc,UAAAC,KAAK,EAAI;AACnB7B,YAAAA,OAAM,CAACP,OAAP,CAAeE,aAAf,eAAyCkC,KAAzC;AACAF,YAAAA,OAAO,CAAC/C,QAAQ,CAACoB,OAAD,CAAT,CAAP;AACH,WAHD;AAIH,SANM,CAAP;AAOH;AACJ,KAhCD,MAgCO;AACHd,MAAAA,OAAO,CAAC4C,OAAR,IAAmB5C,OAAO,CAAC4C,OAAR,CAAgBtB,KAAK,CAACF,QAAtB,CAAnB;AACH;;AAED,WAAOG,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,GA3CD,EAfsD,CA6DtD;;AACA,MAAMuB,GAAG,GAAG,SAANA,GAAM,CAAClB,GAAD,EAAMmB,MAAN,EAAmB/C,WAAnB,EAAwCQ,OAAxC,EAAyD;AAAA,QAAnDuC,MAAmD;AAAnDA,MAAAA,MAAmD,GAA1C,EAA0C;AAAA;;AAAA,QAAtC/C,WAAsC;AAAtCA,MAAAA,WAAsC,GAAxB,KAAwB;AAAA;;AAAA,QAAjBQ,OAAiB;AAAjBA,MAAAA,OAAiB,GAAP,EAAO;AAAA;;AACjET,IAAAA,eAAc,CAACJ,QAAD,EAAWK,WAAX,EAAwBC,OAAxB,CAAd;;AACA,WAAON,QAAQ,CAAC;AACZqD,MAAAA,MAAM,EAAE,KADI;AAEZpB,MAAAA,GAAG,EAAHA,GAFY;AAGZmB,MAAAA,MAAM,EAANA,MAHY;AAIZvC,MAAAA,OAAO,kCAAOb,QAAQ,CAACY,QAAT,CAAkBC,OAAzB,GAAqCA,OAArC;AAJK,KAAD,CAAf;AAMH,GARD;;AAUA,MAAMV,IAAI,GAAG,SAAPA,IAAO,CAAC8B,GAAD,QAIV5B,WAJU,EAIc;AAAA,yBAHvBmC,IAGuB;AAAA,QAHvBA,IAGuB,0BAHhB,EAGgB;AAAA,2BAFvBY,MAEuB;AAAA,QAFvBA,MAEuB,4BAFd,EAEc;AAAA,4BADvBvC,OACuB;AAAA,QADvBA,OACuB,6BADb,EACa;;AAAA,QAAxBR,WAAwB;AAAxBA,MAAAA,WAAwB,GAAV,KAAU;AAAA;;AACvBD,IAAAA,eAAc,CAACJ,QAAD,EAAWK,WAAX,EAAwBC,OAAxB,CAAd;;AACA,WAAON,QAAQ,CAAC;AACZqD,MAAAA,MAAM,EAAE,MADI;AAEZpB,MAAAA,GAAG,EAAHA,GAFY;AAGZmB,MAAAA,MAAM,EAAEA,MAHI;AAIZZ,MAAAA,IAAI,EAAEA,IAJM;AAKZ3B,MAAAA,OAAO,kCAAOb,QAAQ,CAACY,QAAT,CAAkBC,OAAzB,GAAqCA,OAArC;AALK,KAAD,CAAf;AAOH,GAbD;;AAeA,MAAMyC,GAAG,GAAG,SAANA,GAAM,CAACrB,GAAD,SAIT5B,WAJS,EAIe;AAAA,2BAHvBmC,IAGuB;AAAA,QAHvBA,IAGuB,2BAHhB,EAGgB;AAAA,6BAFvBY,MAEuB;AAAA,QAFvBA,MAEuB,6BAFd,EAEc;AAAA,8BADvBvC,OACuB;AAAA,QADvBA,OACuB,8BADb,EACa;;AAAA,QAAxBR,WAAwB;AAAxBA,MAAAA,WAAwB,GAAV,KAAU;AAAA;;AACvBD,IAAAA,eAAc,CAACJ,QAAD,EAAWK,WAAX,EAAwBC,OAAxB,CAAd;;AACA,WAAON,QAAQ,CAAC;AACZqD,MAAAA,MAAM,EAAE,KADI;AAEZpB,MAAAA,GAAG,EAAHA,GAFY;AAGZmB,MAAAA,MAAM,EAAEA,MAHI;AAIZZ,MAAAA,IAAI,EAAEA,IAJM;AAKZ3B,MAAAA,OAAO,kCAAOb,QAAQ,CAACY,QAAT,CAAkBC,OAAzB,GAAqCA,OAArC;AALK,KAAD,CAAf;AAOH,GAbD;;AAeA,MAAM0C,SAAS,GAAG,SAAZA,SAAY,CAACtB,GAAD,SAIf5B,WAJe,EAIS;AAAA,2BAHvBmC,IAGuB;AAAA,QAHvBA,IAGuB,2BAHhB,EAGgB;AAAA,6BAFvBY,MAEuB;AAAA,QAFvBA,MAEuB,6BAFd,EAEc;AAAA,8BADvBvC,OACuB;AAAA,QADvBA,OACuB,8BADb,EACa;;AAAA,QAAxBR,WAAwB;AAAxBA,MAAAA,WAAwB,GAAV,KAAU;AAAA;;AACvBD,IAAAA,eAAc,CAACJ,QAAD,EAAWK,WAAX,EAAwBC,OAAxB,CAAd;;AACA,WAAON,QAAQ,CAAC;AACZqD,MAAAA,MAAM,EAAE,QADI;AAEZpB,MAAAA,GAAG,EAAHA,GAFY;AAGZmB,MAAAA,MAAM,EAAEA,MAHI;AAIZZ,MAAAA,IAAI,EAAEA,IAJM;AAKZ3B,MAAAA,OAAO,kCAAOb,QAAQ,CAACY,QAAT,CAAkBC,OAAzB,GAAqCA,OAArC;AALK,KAAD,CAAf;AAOH,GAbD;;AAeA,SAAO;AACHb,IAAAA,QAAQ,EAARA,QADG;AAEHmD,IAAAA,GAAG,EAAHA,GAFG;AAGHhD,IAAAA,IAAI,EAAJA,IAHG;AAIHmD,IAAAA,GAAG,EAAHA,GAJG;AAKHC,IAAAA,SAAS,EAATA,SALG;AAMHnD,IAAAA,cAAc,EAAE;AAAA,aAAMA,eAAc,CAACJ,QAAD,EAAW,IAAX,EAAiBM,OAAjB,CAApB;AAAA,KANb;AAOHP,IAAAA,YAAY,EAAE,sBAACE,IAAD;AAAA,aAAUF,aAAY,CAACC,QAAD,EAAWC,IAAI,IAAIK,OAAO,CAAC6B,gBAA3B,EAA6C7B,OAAO,CAAC8B,UAAR,IAAsBhB,MAAM,CAAClB,OAA1E,CAAtB;AAAA;AAPX,GAAP;AASH","sourcesContent":["import axios from 'axios'\r\nimport { getToken, setToken, getRefreshToken, getTokenState, setTokenState, getPosId, setRefreshToken } from './auth'\r\n\r\n// 刷新 access_token 的接口\r\nconst refreshToken = (instance, path = '/refresh/token', baseURL) => {\r\n    return instance.post(path + `?refreshToken=${getRefreshToken()}`, { refreshToken: getRefreshToken() }, { baseURL })\r\n    // return instance.request({\r\n    //     baseURL,\r\n    //     url: path + `?refreshToken=${getRefreshToken()}`,\r\n    //     method: 'post',\r\n    //     data: { refreshToken: getRefreshToken() }\r\n    // })\r\n}\r\n\r\n// 给请求头添加 access_token\r\nconst setHeaderToken = (instance, isNeedToken, options = {}) => {\r\n    const refreshToken = isNeedToken ? getRefreshToken() : null\r\n    const accessToken = isNeedToken ? getToken() : null\r\n\r\n    if (isNeedToken) { // api 请求需要携带 access_token\r\n        let tokenLose = getTokenState()\r\n        if (!refreshToken && !tokenLose) {\r\n            console.log('不存在 access_token 则跳转回登录页')\r\n            setTokenState(true)\r\n            options.onTokenLose && options.onTokenLose()\r\n        }\r\n        instance.defaults.headers.common.Authorization = `Bearer ${accessToken}`\r\n        options.setHeaders && options.setHeaders(instance)\r\n    }\r\n}\r\n\r\nexport const setPosHeaders = (instance, key = 'x-shj-request-dept-pos-id') => {\r\n    instance.defaults.headers.common[key] = getPosId()\r\n}\r\n\r\nexport default function create(config = {}, options = {}) {\r\n    // 创建 axios 实例\r\n    const instance = axios.create({\r\n        // baseURL: process.env.GATSBY_API_URL,\r\n        // baseURL: '/api',\r\n        timeout: 30000,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        ...config\r\n    })\r\n\r\n    let isRefreshing = false // 标记是否正在刷新 token\r\n    let requests = [] // 存储待重发请求的数组\r\n\r\n    instance.interceptors.response.use(response => {\r\n        return response\r\n    }, error => {\r\n        if (!error.response) {\r\n            return Promise.reject(error)\r\n        }\r\n        if (/^417$|^401$/g.test(error.response.status) && !error.config.url.includes('/auth/refresh')) {\r\n            const { config } = error\r\n            if (!isRefreshing) {\r\n                isRefreshing = true\r\n                return refreshToken(instance, options.refreshTokenPath, options.refreshURL || config.baseURL)\r\n                    .then(res => {\r\n                        const access_token = res.data[options.tokenKey || 'data']\r\n                        const refresh_token = res.headers[options.refreshTokenKey || 'refresh_token']\r\n                        setToken(access_token)\r\n                        setRefreshToken(refresh_token)\r\n                        config.headers.Authorization = `Bearer ${access_token}`\r\n                        // token 刷新后将数组的方法重新执行\r\n                        requests.forEach((cb) => cb(access_token))\r\n                        requests = [] // 重新请求完清空\r\n                        return instance(config)\r\n                    }).catch(err => {\r\n                        console.log('抱歉，您的登录状态已失效，请重新登录！')\r\n                        options.onTokenLose && options.onTokenLose()\r\n                        return Promise.reject(err)\r\n                    }).finally(() => {\r\n                        isRefreshing = false\r\n                    })\r\n            } else {\r\n                // 返回未执行 resolve 的 Promise\r\n                return new Promise(resolve => {\r\n                    // 用函数形式将 resolve 存入，等待刷新后再执行\r\n                    requests.push(token => {\r\n                        config.headers.Authorization = `Bearer ${token}`\r\n                        resolve(instance(config))\r\n                    })\r\n                })\r\n            }\r\n        } else {\r\n            options.onError && options.onError(error.response)\r\n        }\r\n\r\n        return Promise.reject(error)\r\n    })\r\n\r\n\r\n    // 有些 api 并不需要用户授权使用，则无需携带 access_token；默认不携带，需要传则设置第三个参数为 true\r\n    const get = (url, params = {}, isNeedToken = false, headers = {}) => {\r\n        setHeaderToken(instance, isNeedToken, options)\r\n        return instance({\r\n            method: 'get',\r\n            url,\r\n            params,\r\n            headers: { ...instance.defaults.headers, ...headers },\r\n        })\r\n    }\r\n\r\n    const post = (url, {\r\n        data = {},\r\n        params = {},\r\n        headers = {},\r\n    }, isNeedToken = false) => {\r\n        setHeaderToken(instance, isNeedToken, options)\r\n        return instance({\r\n            method: 'post',\r\n            url,\r\n            params: params,\r\n            data: data,\r\n            headers: { ...instance.defaults.headers, ...headers },\r\n        })\r\n    }\r\n\r\n    const put = (url, {\r\n        data = {},\r\n        params = {},\r\n        headers = {},\r\n    }, isNeedToken = false) => {\r\n        setHeaderToken(instance, isNeedToken, options)\r\n        return instance({\r\n            method: 'put',\r\n            url,\r\n            params: params,\r\n            data: data,\r\n            headers: { ...instance.defaults.headers, ...headers },\r\n        })\r\n    }\r\n\r\n    const deleteReq = (url, {\r\n        data = {},\r\n        params = {},\r\n        headers = {},\r\n    }, isNeedToken = false) => {\r\n        setHeaderToken(instance, isNeedToken, options)\r\n        return instance({\r\n            method: 'delete',\r\n            url,\r\n            params: params,\r\n            data: data,\r\n            headers: { ...instance.defaults.headers, ...headers },\r\n        })\r\n    }\r\n\r\n    return {\r\n        instance,\r\n        get,\r\n        post,\r\n        put,\r\n        deleteReq,\r\n        setHeaderToken: () => setHeaderToken(instance, true, options),\r\n        refreshToken: (path) => refreshToken(instance, path || options.refreshTokenPath, options.refreshURL || config.baseURL),\r\n    }\r\n}\r\n\r\n\r\n"],"file":"request.js"}